# WARNING - EXPERIMENTAL
# This file was auto generated from the existing API using an IntelliJ plugin,
# see https://www.jetbrains.com/help/idea/openapi.html#generate_openapi
#
# Manual changes were done for this 'spec' to work in-place with the
# model-server for now. A lot of changes were done and are still necessary
# to make this OpenAPI a viable artifact. It will most likely be split
# into multiple OpenAPI files.

openapi: "3.0.3"
info:
  title: "model-server public API"
  description: "modelix public API"
  version: "1.0.0"
servers:
  - url: '/'
    description: model-server
paths:
  /v2/server-id:
    get:
      operationId: getServerId
      responses:
        "200":
          $ref: '#/components/responses/200'
        default:
          $ref: '#/components/responses/GeneralError'
  /v2/user-id:
    get:
      operationId: getUserId
      responses:
        "200":
          $ref: '#/components/responses/200'
        default:
          $ref: '#/components/responses/GeneralError'
  /v2/generate-client-id:
    post:
      operationId: postGenerateClientId
      responses:
        "200":
          $ref: '#/components/responses/200'
        default:
          $ref: '#/components/responses/GeneralError'
  /headers:
    get:
      operationId: getHeaders
      responses:
        "200":
          $ref: '#/components/responses/200'
        default:
          $ref: '#/components/responses/GeneralError'
  /health:
    get:
      operationId: getHealth
      responses:
        "200":
          $ref: '#/components/responses/200'
        default:
          $ref: '#/components/responses/GeneralError'
  /v2/repositories:
    get:
      operationId: getRepositories
      responses:
        "200":
          $ref: '#/components/responses/200'
        default:
          $ref: '#/components/responses/GeneralError'
  /v2/repositories/{repository}/objects:
    put:
      operationId: putRepositoryObjects
      parameters:
        - name: repository
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "403":
          $ref: '#/components/responses/403'
        "401":
          $ref: '#/components/responses/401'
        "200":
          $ref: '#/components/responses/200json'
        default:
          $ref: '#/components/responses/GeneralError'
  /v2/repositories/{repository}/objects/getAll:
    post:
      operationId: postRepositoryObjectsGetAll
      parameters:
        - name: repository
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/200'
  /v2/repositories/{repository}/branches:
    get:
      operationId: getRepositoryBranches
      parameters:
        - name: repository
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/200'
        default:
          $ref: '#/components/responses/GeneralError'
  /v2/repositories/{repository}/branches/{branch}:
    delete:
      operationId: deleteRepositoryBranch
      parameters:
        - name: repository
          in: "path"
          required: true
          schema:
            type: string
        - name: branch
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "404":
          $ref: '#/components/responses/404'
        "204":
          description: "Branch successfully deleted"
        default:
          $ref: '#/components/responses/GeneralError'
    get:
      operationId: getRepositoryBranch
      parameters:
        - name: lastKnown
          in: "query"
          required: false
          schema:
            type: string
        - name: repository
          in: "path"
          required: true
          schema:
            type: string
        - name: branch
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "404":
          $ref: '#/components/responses/404'
        "200":
          $ref: '#/components/responses/versionDelta'
#          content:
#            '*/*':
#              schema:
#                $ref: "#/components/schemas/VersionDelta"
        default:
          $ref: '#/components/responses/GeneralError'
    post:
      operationId: postRepositoryBranch
      parameters:
        - name: repository
          in: "path"
          required: true
          schema:
            type: string
        - name: branch
          in: "path"
          required: true
          schema:
            type: string
# this was autogenerated but will break tests
# we need to manually design the content to allow
# type safe access on our APIs
#      requestBody:
#        content:
#          '*/*':
#            schema:
#              type: string
##              $ref: "#/components/schemas/VersionDelta"
#        required: true
      responses:
        "200":
          $ref: '#/components/responses/versionDelta'
        default:
          $ref: '#/components/responses/GeneralError'
  /v2/repositories/{repository}/branches/{branch}/hash:
    get:
      operationId: getRepositoryBranchHash
      parameters:
        - name: repository
          in: "path"
          required: true
          schema:
            type: string
        - name: branch
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "404":
          $ref: '#/components/responses/404'
        "200":
          $ref: '#/components/responses/200'
        default:
          $ref: '#/components/responses/GeneralError'
  /v2/repositories/{repository}/branches/{branch}/poll:
    get:
      operationId: pollRepositoryBranch
      parameters:
        - name: lastKnown
          in: "query"
          required: false
          schema:
            type: string
        - name: repository
          in: "path"
          required: true
          schema:
            type: string
        - name: branch
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "403":
          $ref: '#/components/responses/403'
        "401":
          $ref: '#/components/responses/401'
        "200":
          $ref: '#/components/responses/versionDelta'
        default:
          $ref: '#/components/responses/GeneralError'
  /v2/repositories/{repository}/branches/{branch}/pollHash:
    get:
      operationId: pollRepositoryBranchHash
      parameters:
        - name: lastKnown
          in: "query"
          required: false
          schema:
            type: string
        - name: legacyGlobalStorage
          in: "query"
          required: false
          schema:
            type: boolean
        - name: repository
          in: "path"
          required: true
          schema:
            type: string
        - name: branch
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "403":
          $ref: '#/components/responses/403'
        "401":
          $ref: '#/components/responses/401'
        "200":
          $ref: '#/components/responses/200'
        default:
          $ref: '#/components/responses/GeneralError'
  /v2/repositories/{repository}/branches/{branch}/query:
    post:
      operationId: postRepositoryBranchQuery
      parameters:
        - name: repository
          in: "path"
          required: true
          schema:
            type: string
        - name: branch
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/200json'
        default:
          $ref: '#/components/responses/GeneralError'
  /v2/repositories/{repository}/init:
    post:
      operationId: initializeRepository
      parameters:
        - name: useRoleIds
          in: "query"
          required: false
          schema:
            type: boolean
        - name: repository
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "403":
          $ref: '#/components/responses/403'
        "401":
          $ref: '#/components/responses/401'
        "200":
          $ref: '#/components/responses/versionDelta'
        default:
          $ref: '#/components/responses/GeneralError'
  /v2/repositories/{repository}/delete:
    post:
      operationId: deleteRepository
      parameters:
        - name: repository
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "204":
          description: "Repository successfully deleted"
          content:
            text/plain:
              schema:
                type: string
        "404":
          $ref: '#/components/responses/404'
  /v2/repositories/{repository}/versions/{versionHash}:
    get:
      operationId: getRepositoryVersionHash
      parameters:
        - name: lastKnown
          in: "query"
          required: false
          schema:
            type: string
        - name: versionHash
          in: "path"
          required: true
          schema:
            type: string
        - name: repository
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "404":
          $ref: '#/components/responses/404'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
        default:
          $ref: '#/components/responses/GeneralError'
  /v2/repositories/{repository}/versions/{versionHash}/query:
    post:
      operationId: postRepositoryVersionHashQuery
      parameters:
        - name: versionHash
          in: "path"
          required: true
          schema:
            type: string
        - name: repository
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/200json'
        default:
          $ref: '#/components/responses/GeneralError'

  /v2/versions/{versionHash}:
    get:
      operationId: getVersionHash
      deprecated: true
      parameters:
        - name: lastKnown
          in: "query"
          required: false
          schema:
            type: string
        - name: versionHash
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "404":
          $ref: '#/components/responses/404'
        "200":
          $ref: '#/components/responses/versionDelta'
        default:
          $ref: '#/components/responses/GeneralError'
  /counter/{key}:
    post:
      parameters:
        - name: key
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "403":
          $ref: '#/components/responses/403'
        "401":
          $ref: '#/components/responses/401'
        "200":
          $ref: '#/components/responses/200'
        default:
          $ref: '#/components/responses/GeneralError'
  /get/{key}:
    get:
      parameters:
        - name: key
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "403":
          $ref: '#/components/responses/403'
        "401":
          $ref: '#/components/responses/401'
        "404":
          $ref: '#/components/responses/404'
        "200":
          $ref: '#/components/responses/200'
        default:
          $ref: '#/components/responses/GeneralError'
  /getAll:
    put:
      responses:
        "403":
          $ref: '#/components/responses/403'
        "401":
          $ref: '#/components/responses/401'
        "200":
          $ref: '#/components/responses/200json'
        default:
          $ref: '#/components/responses/GeneralError'
  /getEmail:
    get:
      responses:
        "200":
          $ref: '#/components/responses/200'
        default:
          $ref: '#/components/responses/GeneralError'
  /getRecursively/{key}:
    get:
      parameters:
        - name: key
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/200json'
        default:
          $ref: '#/components/responses/GeneralError'
  /poll/{key}:
    get:
      parameters:
        - name: key
          in: "path"
          required: true
          schema:
            type: string
        - name: lastKnownValue
          in: "query"
          required: false
          schema:
            type: string
      responses:
        "403":
          $ref: '#/components/responses/403'
        "401":
          $ref: '#/components/responses/401'
        "404":
          $ref: '#/components/responses/404'
        "200":
          $ref: '#/components/responses/200'
        default:
          $ref: '#/components/responses/GeneralError'
  /put/{key}:
    put:
      parameters:
        - name: key
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "403":
          $ref: '#/components/responses/403'
        "401":
          $ref: '#/components/responses/401'
        "200":
          $ref: '#/components/responses/200'
        "404":
          $ref: '#/components/responses/404'
        default:
          $ref: '#/components/responses/GeneralError'
  /putAll:
    put:
      responses:
        "403":
          $ref: '#/components/responses/403'
        "401":
          $ref: '#/components/responses/401'
        "200":
          $ref: '#/components/responses/200'
        "404":
          $ref: '#/components/responses/404'
        default:
          $ref: '#/components/responses/GeneralError'
components:
  responses:
    "200":
      description: OK
      content:
        text/plain:
          schema:
            type: string
    "204":
      description: OK
      content:
        text/plain:
          schema:
            type: string
    "200json":
      description: OK
      content:
        application/json:
          schema:
            type: string

    "400":
      description: "Bad Request"
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    "401":
      description: "Unauthorized"
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    "403":
      description: "Forbidden"
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    "404":
      description: "Not Found"
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    GeneralError:
      description: Unexpected error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'

    "versionDelta":
      description: OK
      content:
        'application/x-modelix-objects':
          schema:
            type: string
        'application/x-modelix-objects-v2':
          schema:
            type: string
        'application/json':
          schema:
            type: object
        'text/plain':
          schema:
            type: string

  schemas:
    # From https://opensource.zalando.com/restful-api-guidelines/models/problem-1.0.1.yaml
    Problem:
      type: object
      properties:
        type:
          type: string
          format: uri-reference
          description: >
            A URI reference that uniquely identifies the problem type only in the
            context of the provided API. Opposed to the specification in RFC-9457,
            it is neither recommended to be dereferenceable and point to a
            human-readable documentation nor globally unique for the problem type.
          default: 'about:blank'
          example: '/some/uri-reference'
        title:
          type: string
          description: >
            A short summary of the problem type. Written in English and readable
            for engineers, usually not suited for non technical stakeholders and
            not localized.
          example: some title for the error situation
        status:
          type: integer
          format: int32
          description: >
            The HTTP status code generated by the origin server for this occurrence
            of the problem.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
        detail:
          type: string
          description: >
            A human readable explanation specific to this occurrence of the
            problem that is helpful to locate the problem and give advice on how
            to proceed. Written in English and readable for engineers, usually not
            suited for non technical stakeholders and not localized.
          example: some description for the error situation
        instance:
          type: string
          format: uri-reference
          description: >
            A URI reference that identifies the specific occurrence of the problem,
            e.g. by adding a fragment identifier or sub-path to the problem type.
            May be used to locate the root of this problem in the source code.
          example: '/some/uri-reference#specific-occurrence-context'

    VersionDelta:
      title: VersionDelta
      type: object
      properties:
        versionHash:
            type: string
        baseVersion:
            type: string
        objects:
            $ref: '#/components/schemas/MapItem'
        objectsMap:
            $ref: '#/components/schemas/MapItem'
      required:
        - versionHash
        - objects
        - objectsMap
    MapItem:
      properties:
        value1:
          type: string
        value2:
          type: string
